defmodule Lily.SupportedOperatorsTest do
  use ExUnit.Case
  import Lily.Operator

  describe "unary operator" do
    operators(@: fn a -> "#{a}" end)
    operators(+: fn a -> "#{a}" end)
    operators(-: fn a -> "#{a}" end)
    operators(!: fn a -> "#{a}" end)
    operators(not: fn a -> "#{a}" end)
    operators(~~~: fn a -> "#{a}" end)

    test "@", do: assert(@:a == "a")
    test "+/1", do: assert(+:a == "a")
    test "-/1", do: assert(-:a == "a")
    test "!", do: assert(!:a == "a")
    test "not", do: assert(not :a == "a")
    test "~~~", do: assert(~~~:a == "a")
  end

  describe "binary operator" do
    operators(*: fn a, b -> "#{a}#{b}" end)
    operators(/: fn a, b -> "#{a}#{b}" end)
    operators(+: fn a, b -> "#{a}#{b}" end)
    operators(-: fn a, b -> "#{a}#{b}" end)
    operators(++: fn a, b -> "#{a}#{b}" end)
    operators(--: fn a, b -> "#{a}#{b}" end)
    operators(..: fn a, b -> "#{a}#{b}" end)
    operators(<>: fn a, b -> "#{a}#{b}" end)
    operators(^^^: fn a, b -> "#{a}#{b}" end)
    operators(in: fn a, b -> "#{a}#{b}" end)
    operators(|>: fn a, b -> "#{a}#{b}" end)
    operators(<<<: fn a, b -> "#{a}#{b}" end)
    operators(>>>: fn a, b -> "#{a}#{b}" end)
    operators(<<~: fn a, b -> "#{a}#{b}" end)
    operators(~>>: fn a, b -> "#{a}#{b}" end)
    operators(<~: fn a, b -> "#{a}#{b}" end)
    operators(~>: fn a, b -> "#{a}#{b}" end)
    operators(<~>: fn a, b -> "#{a}#{b}" end)
    operators(<|>: fn a, b -> "#{a}#{b}" end)
    operators(<: fn a, b -> "#{a}#{b}" end)
    operators(>: fn a, b -> "#{a}#{b}" end)
    operators(<=: fn a, b -> "#{a}#{b}" end)
    operators(>=: fn a, b -> "#{a}#{b}" end)
    operators(!=: fn a, b -> "#{a}#{b}" end)
    operators(=~: fn a, b -> "#{a}#{b}" end)
    operators(===: fn a, b -> "#{a}#{b}" end)
    operators(!==: fn a, b -> "#{a}#{b}" end)
    operators(&&: fn a, b -> "#{a}#{b}" end)
    operators(&&&: fn a, b -> "#{a}#{b}" end)
    operators(and: fn a, b -> "#{a}#{b}" end)
    operators(||: fn a, b -> "#{a}#{b}" end)
    operators(|||: fn a, b -> "#{a}#{b}" end)
    operators(or: fn a, b -> "#{a}#{b}" end)
    operators(=: fn a, b -> "#{a}#{b}" end)
    operators(|: fn a, b -> "#{a}#{b}" end)
    operators("::": fn a, b -> "#{a}#{b}" end)
    operators(<-: fn a, b -> "#{a}#{b}" end)
    operators(\\: fn a, b -> "#{a}#{b}" end)

    test "*", do: assert(:a * :b == "ab")
    test "/", do: assert(:a / :b == "ab")
    test "+/2", do: assert(:a + :b == "ab")
    test "-/2", do: assert(:a - :b == "ab")
    test "++", do: assert(:a ++ :b == "ab")
    test "--", do: assert(:a -- :b == "ab")
    test "..", do: assert(:a..:b == "ab")
    test "<>", do: assert(:a <> :b == "ab")
    test "^^^", do: assert(:a ^^^ :b == "ab")
    test "in", do: assert(:a in :b == "ab")
    test "|>", do: assert(:a |> :b == "ab")
    test "<<<", do: assert(:a <<< :b == "ab")
    test ">>>", do: assert(:a >>> :b == "ab")
    test "<<~", do: assert(:a <<~ :b == "ab")
    test "~>>", do: assert(:a ~>> :b == "ab")
    test "<~", do: assert(:a <~ :b == "ab")
    test "~>", do: assert(:a ~> :b == "ab")
    test "<~>", do: assert(:a <~> :b == "ab")
    test "<|>", do: assert(:a <|> :b == "ab")
    test "<", do: assert(:a < :b == "ab")
    test ">", do: assert(:a > :b == "ab")
    test "<=", do: assert(:a <= :b == "ab")
    test ">=", do: assert(:a >= :b == "ab")
    test "!=", do: assert(:a != :b == "ab")
    test "=~", do: assert(:a =~ :b == "ab")
    test "===", do: assert(:a === :b == "ab")
    test "!==", do: assert(:a !== :b == "ab")
    test "&&", do: assert((:a && :b) == "ab")
    test "&&&", do: assert((:a &&& :b) == "ab")
    test "and", do: assert((:a and :b) == "ab")
    test "||", do: assert((:a || :b) == "ab")
    test "|||", do: assert((:a ||| :b) == "ab")
    test "or", do: assert((:a or :b) == "ab")
    test "|", do: assert((:a | :b) == "ab")
    test "::", do: assert((:a :: :b) == "ab")
    test ":<-", do: assert((:a <- :b) == "ab")
    test ":\\", do: assert((:a \\ :b) == "ab")
  end
end
